syntax = "proto3";

option go_package = "github.com/Richie78321/groupchat/chatservice";

package chatservice;

message EphemeralState {}

message MessageAppend {
    string message_uuid = 1;
    string author_id = 2;
    string body = 3;
}

message MessageLike {
    string message_uuid = 1;
    string liker_id = 2;
    bool like = 3;
}

message Event {
    string pid = 1;
    int64 sequence_number = 2;
    int64 lamport_timestamp = 3;
    string chatroom_id = 4;
    oneof event {
        MessageAppend message_append = 5;
        MessageLike message_like = 6;
    };
}

message SubscribeRequest {
    // The sequence number vector is a map from a process' PID to the next-expected
    // event sequence number from that process.
    map<string, int64> sequence_number_vector = 1;
}
message SubscriptionUpdate {
    EphemeralState ephemeral_state = 1;
    repeated Event events = 2;
    // The garbage collected to vector is a map from a process' PID to the maximum
    // sequence number from this PID where garbage collection ran. This is useful
    // to assure the subscriber the holes in the sequences numbers below this point
    // are because of garbage collection.
    map<string, int64> garbage_collected_to_vector = 3;
}

service ReplicationService {
    rpc subscribe_updates(SubscribeRequest) returns (stream SubscriptionUpdate) {}
}
